{"ast":null,"code":"import _objectSpread from \"/home/arthur/UEM/DesenvolvimentoPET/pet-ui/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/home/arthur/UEM/DesenvolvimentoPET/pet-ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/arthur/UEM/DesenvolvimentoPET/pet-ui/src/Components/Admin/Usuario/Users.js\";\nimport React, { Fragment } from 'react';\nimport { Datagrid, TextField, AutocompleteInput, Filter, List, ImageField } from 'react-admin';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Divider from '@material-ui/core/Divider';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport ModifyRealmButton from './alterRealm.js';\nimport UserPic from '../addPicButton';\nconst filterStyles = {\n  status: {\n    width: 150\n  }\n};\nconst OrderFilter = withStyles(filterStyles)((_ref) => {\n  let classes = _ref.classes,\n      props = _objectWithoutProperties(_ref, [\"classes\"]);\n\n  return React.createElement(Filter, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), React.createElement(AutocompleteInput, {\n    choices: Object.values(Object.values(props)[2]),\n    source: \"id\",\n    label: \"Nome do usu\\xE1rio\",\n    optionValue: \"id\",\n    optionText: \"nome\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }));\n});\n\nconst CustomPicField = props => React.createElement(ImageField, Object.assign({\n  className: \"thumbNailView\",\n  source: \"foto\"\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33\n  },\n  __self: this\n}));\n\nconst datagridStyles = {\n  total: {\n    fontWeight: 'bold'\n  }\n};\n\nclass TabbedDatagrid extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.tabs = [{\n      id: 'normal',\n      name: 'normal'\n    }, {\n      id: 'petiano',\n      name: 'petiano'\n    }, {\n      id: 'ajudante',\n      name: 'ajudante'\n    }];\n    this.state = {\n      todos: [],\n      petiano: [],\n      ajudante: []\n    };\n\n    this.handleChange = (event, value) => {\n      const _this$props = this.props,\n            filterValues = _this$props.filterValues,\n            setFilters = _this$props.setFilters;\n      setFilters(_objectSpread({}, filterValues, {\n        realm: value\n      }));\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.ids !== state[props.filterValues.status]) {\n      return _objectSpread({}, state, {\n        [props.filterValues.status]: props.ids\n      });\n    }\n\n    return null;\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          classes = _this$props2.classes,\n          filterValues = _this$props2.filterValues,\n          props = _objectWithoutProperties(_this$props2, [\"classes\", \"filterValues\"]);\n\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      fullWidth: true,\n      centered: true,\n      value: filterValues.realm,\n      indicatorColor: \"primary\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, this.tabs.map(choice => React.createElement(Tab, {\n      key: choice.id,\n      label: choice.name,\n      value: choice.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, filterValues.realm === 'normal' && React.createElement(Datagrid, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      source: \"nome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      source: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      label: \"Privil\\xE9gio\",\n      source: \"realm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(ModifyRealmButton, Object.assign({\n      label: \"Modificar privil\\xE9gio\"\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }))), filterValues.realm === 'petiano' && React.createElement(Datagrid, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(CustomPicField, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })), React.createElement(TextField, {\n      source: \"nome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      source: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      label: \"Privil\\xE9gio\",\n      source: \"realm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(UserPic, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })), React.createElement(ModifyRealmButton, Object.assign({\n      label: \"Modificar privil\\xE9gio\"\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }))), filterValues.realm === 'ajudante' && React.createElement(Datagrid, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      source: \"nome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      source: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      label: \"Privil\\xE9gio\",\n      source: \"realm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(ModifyRealmButton, Object.assign({\n      label: \"Modificar privil\\xE9gio\"\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nconst StyledTabbedDatagrid = withStyles(datagridStyles)(TabbedDatagrid);\n\nconst UserList = (_ref2) => {\n  let classes = _ref2.classes,\n      props = _objectWithoutProperties(_ref2, [\"classes\"]);\n\n  return React.createElement(List, Object.assign({\n    filterDefaultValues: {\n      realm: 'normal'\n    },\n    sort: {\n      field: 'nome',\n      order: 'ASC'\n    },\n    filters: React.createElement(OrderFilter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }),\n    bulkActionButtons: false\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), React.createElement(StyledTabbedDatagrid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }));\n};\n\nexport default UserList;","map":{"version":3,"sources":["/home/arthur/UEM/DesenvolvimentoPET/pet-ui/src/Components/Admin/Usuario/Users.js"],"names":["React","Fragment","Datagrid","TextField","AutocompleteInput","Filter","List","ImageField","withStyles","Divider","Tabs","Tab","ModifyRealmButton","UserPic","filterStyles","status","width","OrderFilter","classes","props","Object","values","CustomPicField","datagridStyles","total","fontWeight","TabbedDatagrid","Component","tabs","id","name","state","todos","petiano","ajudante","handleChange","event","value","filterValues","setFilters","realm","getDerivedStateFromProps","ids","render","map","choice","StyledTabbedDatagrid","UserList","field","order"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport {\n  Datagrid,\n  TextField,\n  AutocompleteInput,\n  Filter,\n  List,\n  ImageField\n} from 'react-admin';\nimport withStyles from '@material-ui/core/styles/withStyles';\n\nimport Divider from '@material-ui/core/Divider';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport ModifyRealmButton from './alterRealm.js';\nimport UserPic from '../addPicButton';\nconst filterStyles = {\n  status: { width: 150 }\n};\n\nconst OrderFilter = withStyles(filterStyles)(({ classes, ...props }) => (\n  <Filter {...props}>\n    <AutocompleteInput\n      choices={Object.values(Object.values(props)[2])}\n      source=\"id\"\n      label=\"Nome do usuário\"\n      optionValue=\"id\"\n      optionText=\"nome\"\n    />\n  </Filter>\n));\nconst CustomPicField = props => (\n  <ImageField className=\"thumbNailView\" source=\"foto\" {...props} />\n);\n\nconst datagridStyles = {\n  total: { fontWeight: 'bold' }\n};\n\nclass TabbedDatagrid extends React.Component {\n  tabs = [\n    { id: 'normal', name: 'normal' },\n    { id: 'petiano', name: 'petiano' },\n    { id: 'ajudante', name: 'ajudante' }\n  ];\n\n  state = { todos: [], petiano: [], ajudante: [] };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.ids !== state[props.filterValues.status]) {\n      return { ...state, [props.filterValues.status]: props.ids };\n    }\n    return null;\n  }\n\n  handleChange = (event, value) => {\n    const { filterValues, setFilters } = this.props;\n    setFilters({ ...filterValues, realm: value });\n  };\n\n  render() {\n    const { classes, filterValues, ...props } = this.props;\n    return (\n      <Fragment>\n        <Tabs\n          fullWidth\n          centered\n          value={filterValues.realm}\n          indicatorColor=\"primary\"\n          onChange={this.handleChange}\n        >\n          {this.tabs.map(choice => (\n            <Tab key={choice.id} label={choice.name} value={choice.id} />\n          ))}\n        </Tabs>\n        <Divider />\n        <div>\n          {filterValues.realm === 'normal' && (\n            <Datagrid {...props}>\n              <TextField source=\"nome\" />\n              <TextField source=\"email\" />\n              <TextField label=\"Privilégio\" source=\"realm\" />\n              <ModifyRealmButton label=\"Modificar privilégio\" {...props} />\n            </Datagrid>\n          )}\n          {filterValues.realm === 'petiano' && (\n            <Datagrid {...props}>\n              <CustomPicField {...props}></CustomPicField>\n              <TextField source=\"nome\" />\n              <TextField source=\"email\" />\n              <TextField label=\"Privilégio\" source=\"realm\" />\n              <UserPic {...props}></UserPic>\n              <ModifyRealmButton label=\"Modificar privilégio\" {...props} />\n            </Datagrid>\n          )}\n          {filterValues.realm === 'ajudante' && (\n            <Datagrid {...props}>\n              <TextField source=\"nome\" />\n              <TextField source=\"email\" />\n              <TextField label=\"Privilégio\" source=\"realm\" />\n              <ModifyRealmButton label=\"Modificar privilégio\" {...props} />\n            </Datagrid>\n          )}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst StyledTabbedDatagrid = withStyles(datagridStyles)(TabbedDatagrid);\n\nconst UserList = ({ classes, ...props }) => (\n  <List\n    filterDefaultValues={{ realm: 'normal' }}\n    sort={{ field: 'nome', order: 'ASC' }}\n    filters={<OrderFilter></OrderFilter>}\n    bulkActionButtons={false}\n    {...props}\n  >\n    <StyledTabbedDatagrid></StyledTabbedDatagrid>\n  </List>\n);\n\nexport default UserList;\n"]},"metadata":{},"sourceType":"module"}