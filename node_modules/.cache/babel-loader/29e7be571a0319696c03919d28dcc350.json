{"ast":null,"code":"import { AUTH_LOGOUT, AUTH_ERROR, AUTH_GET_PERMISSIONS, AUTH_CHECK } from 'react-admin';\nimport axios from 'axios';\nimport PathName from '../pathConst';\nexport default ((type, params) => {\n  if (type === AUTH_LOGOUT) {\n    return Promise.resolve();\n  }\n\n  if (type === AUTH_ERROR) {\n    const status = params.status;\n\n    if (status === 401 || status === 403) {\n      localStorage.clear();\n      return Promise.reject();\n    }\n  }\n\n  if (type === AUTH_CHECK) {\n    async function verifyPetiano() {\n      const userId = await localStorage.getItem('user_id');\n      const token = localStorage.getItem('access_token');\n      const Token = {\n        headers: {\n          Authorization: token\n        }\n      };\n      const filter = {\n        fields: {\n          id: true,\n          realm: true\n        }\n      };\n      let res = await axios.get(\"http://\".concat(PathName, \"/pet/api/Usuarios/\").concat(userId, \"/?filter=\").concat(JSON.stringify(filter)), Token);\n      console.log(res.data);\n      return res.data.realm === 'Petiano' || res.data.realm === 'Ajudante' || res.data.realm === 'admin' ? Promise.resolve() : Promise.reject();\n    }\n\n    return verifyPetiano();\n  }\n\n  if (type === AUTH_GET_PERMISSIONS) {\n    async function getRealm() {\n      const user_id = await localStorage.getItem('user_id');\n      const filter = {\n        fields: {\n          realm: true\n        }\n      };\n      const token = localStorage.getItem('access_token');\n      const Token = {\n        headers: {\n          Authorization: token\n        }\n      };\n      const role = await axios.get(\"http://\".concat(PathName, \"/pet/api/Usuarios/\").concat(user_id, \"?filter=\").concat(JSON.stringify(filter)), Token);\n      return Promise.resolve(role.data.realm);\n    }\n\n    return getRealm();\n  }\n\n  return Promise.reject('Unknown method');\n});","map":{"version":3,"sources":["/home/arthur/UEM/DesenvolvimentoPET/pet-ui/src/Components/Admin/authProvider.js"],"names":["AUTH_LOGOUT","AUTH_ERROR","AUTH_GET_PERMISSIONS","AUTH_CHECK","axios","PathName","type","params","Promise","resolve","status","localStorage","clear","reject","verifyPetiano","userId","getItem","token","Token","headers","Authorization","filter","fields","id","realm","res","get","JSON","stringify","console","log","data","getRealm","user_id","role"],"mappings":"AAAA,SACEA,WADF,EAEEC,UAFF,EAGEC,oBAHF,EAIEC,UAJF,QAKO,aALP;AAMA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,cAArB;AAEA,gBAAe,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAC/B,MAAID,IAAI,KAAKN,WAAb,EAA0B;AACxB,WAAOQ,OAAO,CAACC,OAAR,EAAP;AACD;;AACD,MAAIH,IAAI,KAAKL,UAAb,EAAyB;AAAA,UACfS,MADe,GACJH,MADI,CACfG,MADe;;AAEvB,QAAIA,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC;AACpCC,MAAAA,YAAY,CAACC,KAAb;AACA,aAAOJ,OAAO,CAACK,MAAR,EAAP;AACD;AACF;;AAED,MAAIP,IAAI,KAAKH,UAAb,EAAyB;AACvB,mBAAeW,aAAf,GAA+B;AAC7B,YAAMC,MAAM,GAAG,MAAMJ,YAAY,CAACK,OAAb,CAAqB,SAArB,CAArB;AACA,YAAMC,KAAK,GAAGN,YAAY,CAACK,OAAb,CAAqB,cAArB,CAAd;AACA,YAAME,KAAK,GAAG;AACZC,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAEH;AADR;AADG,OAAd;AAKA,YAAMI,MAAM,GAAG;AACbC,QAAAA,MAAM,EAAE;AACNC,UAAAA,EAAE,EAAE,IADE;AAENC,UAAAA,KAAK,EAAE;AAFD;AADK,OAAf;AAMA,UAAIC,GAAG,GAAG,MAAMrB,KAAK,CAACsB,GAAN,kBACJrB,QADI,+BACyBU,MADzB,sBAC2CY,IAAI,CAACC,SAAL,CACvDP,MADuD,CAD3C,GAIdH,KAJc,CAAhB;AAMAW,MAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACM,IAAhB;AACA,aAAON,GAAG,CAACM,IAAJ,CAASP,KAAT,KAAmB,SAAnB,IACLC,GAAG,CAACM,IAAJ,CAASP,KAAT,KAAmB,UADd,IAELC,GAAG,CAACM,IAAJ,CAASP,KAAT,KAAmB,OAFd,GAGHhB,OAAO,CAACC,OAAR,EAHG,GAIHD,OAAO,CAACK,MAAR,EAJJ;AAKD;;AACD,WAAOC,aAAa,EAApB;AACD;;AACD,MAAIR,IAAI,KAAKJ,oBAAb,EAAmC;AACjC,mBAAe8B,QAAf,GAA0B;AACxB,YAAMC,OAAO,GAAG,MAAMtB,YAAY,CAACK,OAAb,CAAqB,SAArB,CAAtB;AACA,YAAMK,MAAM,GAAG;AACbC,QAAAA,MAAM,EAAE;AACNE,UAAAA,KAAK,EAAE;AADD;AADK,OAAf;AAKA,YAAMP,KAAK,GAAGN,YAAY,CAACK,OAAb,CAAqB,cAArB,CAAd;AACA,YAAME,KAAK,GAAG;AACZC,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAEH;AADR;AADG,OAAd;AAKA,YAAMiB,IAAI,GAAG,MAAM9B,KAAK,CAACsB,GAAN,kBACPrB,QADO,+BACsB4B,OADtB,qBACwCN,IAAI,CAACC,SAAL,CACvDP,MADuD,CADxC,GAIjBH,KAJiB,CAAnB;AAMA,aAAOV,OAAO,CAACC,OAAR,CAAgByB,IAAI,CAACH,IAAL,CAAUP,KAA1B,CAAP;AACD;;AACD,WAAOQ,QAAQ,EAAf;AACD;;AACD,SAAOxB,OAAO,CAACK,MAAR,CAAe,gBAAf,CAAP;AACD,CAnED","sourcesContent":["import {\n  AUTH_LOGOUT,\n  AUTH_ERROR,\n  AUTH_GET_PERMISSIONS,\n  AUTH_CHECK\n} from 'react-admin';\nimport axios from 'axios';\nimport PathName from '../pathConst';\n\nexport default (type, params) => {\n  if (type === AUTH_LOGOUT) {\n    return Promise.resolve();\n  }\n  if (type === AUTH_ERROR) {\n    const { status } = params;\n    if (status === 401 || status === 403) {\n      localStorage.clear();\n      return Promise.reject();\n    }\n  }\n\n  if (type === AUTH_CHECK) {\n    async function verifyPetiano() {\n      const userId = await localStorage.getItem('user_id');\n      const token = localStorage.getItem('access_token');\n      const Token = {\n        headers: {\n          Authorization: token\n        }\n      };\n      const filter = {\n        fields: {\n          id: true,\n          realm: true\n        }\n      };\n      let res = await axios.get(\n        `http://${PathName}/pet/api/Usuarios/${userId}/?filter=${JSON.stringify(\n          filter\n        )}`,\n        Token\n      );\n      console.log(res.data);\n      return res.data.realm === 'Petiano' ||\n        res.data.realm === 'Ajudante' ||\n        res.data.realm === 'admin'\n        ? Promise.resolve()\n        : Promise.reject();\n    }\n    return verifyPetiano();\n  }\n  if (type === AUTH_GET_PERMISSIONS) {\n    async function getRealm() {\n      const user_id = await localStorage.getItem('user_id');\n      const filter = {\n        fields: {\n          realm: true\n        }\n      };\n      const token = localStorage.getItem('access_token');\n      const Token = {\n        headers: {\n          Authorization: token\n        }\n      };\n      const role = await axios.get(\n        `http://${PathName}/pet/api/Usuarios/${user_id}?filter=${JSON.stringify(\n          filter\n        )}`,\n        Token\n      );\n      return Promise.resolve(role.data.realm);\n    }\n    return getRealm();\n  }\n  return Promise.reject('Unknown method');\n};\n"]},"metadata":{},"sourceType":"module"}