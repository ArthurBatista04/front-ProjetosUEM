{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/arthur/UEM/front-ProjetosUEM/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _reactAdmin = require('react-admin');\n\nvar _storage = require('./storage');\n\nvar _storage2 = _interopRequireDefault(_storage);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step(\"next\", value);\n          }, function (err) {\n            step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n}\n\nvar fetchJson = function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(url) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var requestHeaders, response, text, o, status, statusText, headers, body, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            requestHeaders = options.headers || new Headers({\n              Accept: 'application/json'\n            });\n\n            if (!requestHeaders.has('Content-Type') && !(options && options.body && options.body instanceof FormData)) {\n              requestHeaders.set('Content-Type', 'application/json');\n            }\n\n            if (options.user && options.user.authenticated && options.user.token) {\n              requestHeaders.set('Authorization', options.user.token);\n            }\n\n            _context.next = 5;\n            return fetch(url, _extends({}, options, {\n              headers: requestHeaders\n            }));\n\n          case 5:\n            response = _context.sent;\n            _context.next = 8;\n            return response.text();\n\n          case 8:\n            text = _context.sent;\n            o = {\n              status: response.status,\n              statusText: response.statusText,\n              headers: response.headers,\n              body: text\n            };\n            status = o.status, statusText = o.statusText, headers = o.headers, body = o.body;\n            json = void 0;\n\n            try {\n              json = JSON.parse(body);\n            } catch (e) {// not json, no big deal\n            }\n\n            if (!(status < 200 || status >= 300)) {\n              _context.next = 15;\n              break;\n            }\n\n            return _context.abrupt('return', Promise.reject(new _reactAdmin.HttpError(json && json.error && json.error.message || statusText, status, json)));\n\n          case 15:\n            return _context.abrupt('return', Promise.resolve({\n              status: status,\n              headers: headers,\n              body: body,\n              json: json\n            }));\n\n          case 16:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, undefined);\n  }));\n\n  return function fetchJson(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.default = function (url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.user = {\n    authenticated: true,\n    token: _storage2.default.load('lbtoken').id\n  };\n  return fetchJson(url, options);\n};","map":null,"metadata":{},"sourceType":"script"}