{"ast":null,"code":"import { AUTH_LOGOUT, AUTH_ERROR, AUTH_GET_PERMISSIONS, AUTH_CHECK } from \"react-admin\";\nimport axios from \"axios\";\nimport PathName from \"../pathConst\";\nexport default ((type, params) => {\n  if (type === AUTH_LOGOUT) {\n    return Promise.resolve();\n  }\n\n  if (type === AUTH_ERROR) {\n    const status = params.status;\n\n    if (status === 401 || status === 403) {\n      localStorage.removeItem(\"access_token\");\n      localStorage.removeItem(\"user_id\");\n      localStorage.removeItem(\"petiano\");\n      return Promise.reject();\n    }\n  }\n\n  if (type === AUTH_CHECK) {\n    async function verifyPetiano() {\n      let id = await localStorage.getItem(\"user_id\");\n      let res = await axios.get(\"http://\".concat(PathName, \"/pet/api/Usuarios/petiano/\").concat(id));\n      return res.data ? Promise.resolve() : Promise.reject();\n    }\n\n    return verifyPetiano();\n  }\n\n  if (type === AUTH_GET_PERMISSIONS) {\n    async function getRealm() {\n      const user_id = await localStorage.getItem(\"user_id\");\n      const filter = {\n        fields: {\n          realm: true\n        }\n      };\n      const token = localStorage.getItem(\"access_token\");\n      const Token = {\n        headers: {\n          Authorization: token\n        }\n      };\n      const role = await axios.get(\"http://\".concat(PathName, \"/pet/api/Usuarios/\").concat(user_id, \"?filter=\").concat(JSON.stringify(filter)), Token);\n      return Promise.resolve(role.data.realm);\n    }\n\n    return getRealm();\n  }\n\n  return Promise.reject(\"Unknown method\");\n});","map":{"version":3,"sources":["/home/arthur/UEM/DesenvolvimentoPET/pet-ui/src/Components/Admin/authProvider.js"],"names":["AUTH_LOGOUT","AUTH_ERROR","AUTH_GET_PERMISSIONS","AUTH_CHECK","axios","PathName","type","params","Promise","resolve","status","localStorage","removeItem","reject","verifyPetiano","id","getItem","res","get","data","getRealm","user_id","filter","fields","realm","token","Token","headers","Authorization","role","JSON","stringify"],"mappings":"AAAA,SACEA,WADF,EAEEC,UAFF,EAGEC,oBAHF,EAIEC,UAJF,QAKO,aALP;AAMA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,cAArB;AAEA,gBAAe,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAC/B,MAAID,IAAI,KAAKN,WAAb,EAA0B;AACxB,WAAOQ,OAAO,CAACC,OAAR,EAAP;AACD;;AACD,MAAIH,IAAI,KAAKL,UAAb,EAAyB;AAAA,UACfS,MADe,GACJH,MADI,CACfG,MADe;;AAEvB,QAAIA,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC;AACpCC,MAAAA,YAAY,CAACC,UAAb,CAAwB,cAAxB;AACAD,MAAAA,YAAY,CAACC,UAAb,CAAwB,SAAxB;AACAD,MAAAA,YAAY,CAACC,UAAb,CAAwB,SAAxB;AACA,aAAOJ,OAAO,CAACK,MAAR,EAAP;AACD;AACF;;AAED,MAAIP,IAAI,KAAKH,UAAb,EAAyB;AACvB,mBAAeW,aAAf,GAA+B;AAC7B,UAAIC,EAAE,GAAG,MAAMJ,YAAY,CAACK,OAAb,CAAqB,SAArB,CAAf;AACA,UAAIC,GAAG,GAAG,MAAMb,KAAK,CAACc,GAAN,kBACJb,QADI,uCACiCU,EADjC,EAAhB;AAGA,aAAOE,GAAG,CAACE,IAAJ,GAAWX,OAAO,CAACC,OAAR,EAAX,GAA+BD,OAAO,CAACK,MAAR,EAAtC;AACD;;AACD,WAAOC,aAAa,EAApB;AACD;;AACD,MAAIR,IAAI,KAAKJ,oBAAb,EAAmC;AACjC,mBAAekB,QAAf,GAA0B;AACxB,YAAMC,OAAO,GAAG,MAAMV,YAAY,CAACK,OAAb,CAAqB,SAArB,CAAtB;AACA,YAAMM,MAAM,GAAG;AACbC,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE;AADD;AADK,OAAf;AAKA,YAAMC,KAAK,GAAGd,YAAY,CAACK,OAAb,CAAqB,cAArB,CAAd;AACA,YAAMU,KAAK,GAAG;AACZC,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAEH;AADR;AADG,OAAd;AAKA,YAAMI,IAAI,GAAG,MAAMzB,KAAK,CAACc,GAAN,kBACPb,QADO,+BACsBgB,OADtB,qBACwCS,IAAI,CAACC,SAAL,CACvDT,MADuD,CADxC,GAIjBI,KAJiB,CAAnB;AAMA,aAAOlB,OAAO,CAACC,OAAR,CAAgBoB,IAAI,CAACV,IAAL,CAAUK,KAA1B,CAAP;AACD;;AACD,WAAOJ,QAAQ,EAAf;AACD;;AACD,SAAOZ,OAAO,CAACK,MAAR,CAAe,gBAAf,CAAP;AACD,CAjDD","sourcesContent":["import {\n  AUTH_LOGOUT,\n  AUTH_ERROR,\n  AUTH_GET_PERMISSIONS,\n  AUTH_CHECK\n} from \"react-admin\";\nimport axios from \"axios\";\nimport PathName from \"../pathConst\";\n\nexport default (type, params) => {\n  if (type === AUTH_LOGOUT) {\n    return Promise.resolve();\n  }\n  if (type === AUTH_ERROR) {\n    const { status } = params;\n    if (status === 401 || status === 403) {\n      localStorage.removeItem(\"access_token\");\n      localStorage.removeItem(\"user_id\");\n      localStorage.removeItem(\"petiano\");\n      return Promise.reject();\n    }\n  }\n\n  if (type === AUTH_CHECK) {\n    async function verifyPetiano() {\n      let id = await localStorage.getItem(\"user_id\");\n      let res = await axios.get(\n        `http://${PathName}/pet/api/Usuarios/petiano/${id}`\n      );\n      return res.data ? Promise.resolve() : Promise.reject();\n    }\n    return verifyPetiano();\n  }\n  if (type === AUTH_GET_PERMISSIONS) {\n    async function getRealm() {\n      const user_id = await localStorage.getItem(\"user_id\");\n      const filter = {\n        fields: {\n          realm: true\n        }\n      };\n      const token = localStorage.getItem(\"access_token\");\n      const Token = {\n        headers: {\n          Authorization: token\n        }\n      };\n      const role = await axios.get(\n        `http://${PathName}/pet/api/Usuarios/${user_id}?filter=${JSON.stringify(\n          filter\n        )}`,\n        Token\n      );\n      return Promise.resolve(role.data.realm);\n    }\n    return getRealm();\n  }\n  return Promise.reject(\"Unknown method\");\n};\n"]},"metadata":{},"sourceType":"module"}