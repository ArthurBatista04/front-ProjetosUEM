{"ast":null,"code":"var _jsxFileName = \"/home/arthur/UEM/DesenvolvimentoPET/pet-ui/src/Components/Admin/statusPagamentoButton.js\";\nimport { connect } from 'react-redux';\nimport { change, submit, isSubmitting } from 'redux-form';\nimport React, { Component, Fragment } from 'react';\nimport { Button, SaveButton, ReferenceField, UPDATE, SimpleForm, BooleanInput, TextField, withDataProvider } from 'react-admin';\nimport IconContentAdd from '@material-ui/icons/AttachMoney';\nimport IconCancel from '@material-ui/icons/Cancel';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PropTypes from 'prop-types';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nclass PostQuickCreateButton extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      error: false,\n      showDialog: false\n    };\n\n    this.handleClick = () => {\n      this.setState({\n        showDialog: true\n      });\n    };\n\n    this.handleCloseClick = () => {\n      this.setState({\n        showDialog: false\n      });\n    };\n\n    this.handleSaveClick = () => {\n      const submit = this.props.submit; // Trigger a submit of our custom quick create form\n      // This is needed because our modal action buttons are oustide the form\n\n      submit('post-quick-create');\n    };\n\n    this.handleSubmit = async values => {\n      const _this$props = this.props,\n            dataProvider = _this$props.dataProvider,\n            record = _this$props.record,\n            resource = _this$props.resource;\n      dataProvider(UPDATE, resource, {\n        pagination: {\n          page: 1,\n          perPage: 0\n        },\n        sort: {\n          field: 'id',\n          order: 'DESC'\n        },\n        id: record.id,\n        data: {\n          pago: values.pago\n        },\n        previousData: {\n          pago: record.pago\n        }\n      }, {\n        onSuccess: {\n          refresh: true\n        },\n        onError: {\n          notification: {\n            body: 'Error: algo deu errado!',\n            level: 'warning'\n          }\n        }\n      }).then(res => {\n        console.log(res);\n      });\n      this.setState({\n        showDialog: false\n      });\n    };\n  }\n\n  render() {\n    const showDialog = this.state.showDialog;\n    const _this$props2 = this.props,\n          isSubmitting = _this$props2.isSubmitting,\n          basePath = _this$props2.basePath,\n          record = _this$props2.record,\n          resource = _this$props2.resource;\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleClick,\n      label: \"Status pagamento\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(IconContentAdd, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })), React.createElement(Dialog, {\n      fullWidth: true,\n      open: showDialog,\n      onClose: this.handleCloseClick,\n      \"aria-label\": \"Status pagamento\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Alterar status de pagamento\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(SimpleForm // We override the redux-form name to avoid collision with the react-admin main form\n    , {\n      form: \"post-quick-create\" // We override the redux-form onSubmit prop to handle the submission ourselves\n      ,\n      onSubmit: this.handleSubmit,\n      resource: \"Inscricoes\" // We want no toolbar at all as we have our modal actions\n      ,\n      toolbar: null,\n      record: record,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, resource && resource === 'Inscricoes' ? React.createElement(ReferenceField, {\n      basePath: basePath,\n      label: \"Nome\",\n      linkType: false,\n      record: record,\n      reference: \"Inscritos\",\n      source: \"inscritoId\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(ReferenceField, {\n      label: \"Nome\",\n      linkType: false,\n      reference: \"Usuarios\",\n      source: \"usuarioId\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      source: \"nome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }))) : React.createElement(ReferenceField, {\n      label: \"Nome\",\n      basePath: basePath,\n      linkType: false,\n      reference: \"Usuarios\",\n      source: \"usuarioId\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      source: \"nome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), React.createElement(BooleanInput, {\n      label: \"Pagamento\",\n      defaultValue: false,\n      source: \"pago\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }))), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(SaveButton, {\n      label: \"Confirmar\",\n      saving: isSubmitting,\n      onClick: this.handleSaveClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"ra.action.cancel\",\n      onClick: this.handleCloseClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(IconCancel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nPostQuickCreateButton.propTypes = {\n  dataProvider: PropTypes.func.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  record: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  isSubmitting: isSubmitting('post-quick-create')(state)\n});\n\nconst mapDispatchToProps = {\n  change,\n  submit\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withDataProvider(PostQuickCreateButton));","map":{"version":3,"sources":["/home/arthur/UEM/DesenvolvimentoPET/pet-ui/src/Components/Admin/statusPagamentoButton.js"],"names":["connect","change","submit","isSubmitting","React","Component","Fragment","Button","SaveButton","ReferenceField","UPDATE","SimpleForm","BooleanInput","TextField","withDataProvider","IconContentAdd","IconCancel","Dialog","DialogTitle","PropTypes","DialogContent","DialogActions","PostQuickCreateButton","state","error","showDialog","handleClick","setState","handleCloseClick","handleSaveClick","props","handleSubmit","values","dataProvider","record","resource","pagination","page","perPage","sort","field","order","id","data","pago","previousData","onSuccess","refresh","onError","notification","body","level","then","res","console","log","render","basePath","propTypes","func","isRequired","dispatch","object","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport { change, submit, isSubmitting } from 'redux-form';\nimport React, { Component, Fragment } from 'react';\nimport {\n  Button,\n  SaveButton,\n  ReferenceField,\n  UPDATE,\n  SimpleForm,\n  BooleanInput,\n  TextField,\n  withDataProvider\n} from 'react-admin';\nimport IconContentAdd from '@material-ui/icons/AttachMoney';\nimport IconCancel from '@material-ui/icons/Cancel';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PropTypes from 'prop-types';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nclass PostQuickCreateButton extends Component {\n  state = {\n    error: false,\n    showDialog: false\n  };\n\n  handleClick = () => {\n    this.setState({ showDialog: true });\n  };\n\n  handleCloseClick = () => {\n    this.setState({ showDialog: false });\n  };\n\n  handleSaveClick = () => {\n    const { submit } = this.props;\n\n    // Trigger a submit of our custom quick create form\n    // This is needed because our modal action buttons are oustide the form\n    submit('post-quick-create');\n  };\n\n  handleSubmit = async values => {\n    const { dataProvider, record, resource } = this.props;\n\n    dataProvider(\n      UPDATE,\n      resource,\n      {\n        pagination: { page: 1, perPage: 0 },\n        sort: { field: 'id', order: 'DESC' },\n        id: record.id,\n        data: { pago: values.pago },\n        previousData: { pago: record.pago }\n      },\n      {\n        onSuccess: {\n          refresh: true\n        },\n        onError: {\n          notification: {\n            body: 'Error: algo deu errado!',\n            level: 'warning'\n          }\n        }\n      }\n    ).then(res => {\n      console.log(res);\n    });\n    this.setState({ showDialog: false });\n  };\n\n  render() {\n    const { showDialog } = this.state;\n    const { isSubmitting, basePath, record, resource } = this.props;\n\n    return (\n      <Fragment>\n        <Button onClick={this.handleClick} label=\"Status pagamento\">\n          <IconContentAdd />\n        </Button>\n        <Dialog\n          fullWidth\n          open={showDialog}\n          onClose={this.handleCloseClick}\n          aria-label=\"Status pagamento\"\n        >\n          <DialogTitle>Alterar status de pagamento</DialogTitle>\n          <DialogContent>\n            <SimpleForm\n              // We override the redux-form name to avoid collision with the react-admin main form\n              form=\"post-quick-create\"\n              // We override the redux-form onSubmit prop to handle the submission ourselves\n              onSubmit={this.handleSubmit}\n              resource=\"Inscricoes\"\n              // We want no toolbar at all as we have our modal actions\n              toolbar={null}\n              record={record}\n            >\n              {resource && resource === 'Inscricoes' ? (\n                <ReferenceField\n                  basePath={basePath}\n                  label=\"Nome\"\n                  linkType={false}\n                  record={record}\n                  reference=\"Inscritos\"\n                  source=\"inscritoId\"\n                >\n                  <ReferenceField\n                    label=\"Nome\"\n                    linkType={false}\n                    reference=\"Usuarios\"\n                    source=\"usuarioId\"\n                  >\n                    <TextField source=\"nome\" />\n                  </ReferenceField>\n                </ReferenceField>\n              ) : (\n                <ReferenceField\n                  label=\"Nome\"\n                  basePath={basePath}\n                  linkType={false}\n                  reference=\"Usuarios\"\n                  source=\"usuarioId\"\n                >\n                  <TextField source=\"nome\" />\n                </ReferenceField>\n              )}\n\n              <BooleanInput\n                label=\"Pagamento\"\n                defaultValue={false}\n                source=\"pago\"\n              />\n            </SimpleForm>\n          </DialogContent>\n          <DialogActions>\n            <SaveButton\n              label=\"Confirmar\"\n              saving={isSubmitting}\n              onClick={this.handleSaveClick}\n            />\n            <Button label=\"ra.action.cancel\" onClick={this.handleCloseClick}>\n              <IconCancel />\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Fragment>\n    );\n  }\n}\n\nPostQuickCreateButton.propTypes = {\n  dataProvider: PropTypes.func.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  record: PropTypes.object\n};\nconst mapStateToProps = state => ({\n  isSubmitting: isSubmitting('post-quick-create')(state)\n});\n\nconst mapDispatchToProps = {\n  change,\n\n  submit\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withDataProvider(PostQuickCreateButton));\n"]},"metadata":{},"sourceType":"module"}