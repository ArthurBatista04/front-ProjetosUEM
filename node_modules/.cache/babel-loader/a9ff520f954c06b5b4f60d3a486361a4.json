{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = exports.TimePicker = void 0;\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames2 = _interopRequireDefault(require(\"classnames\"));\n\nvar _withStyles = _interopRequireDefault(require(\"@material-ui/core/styles/withStyles\"));\n\nvar _PickerToolbar = _interopRequireDefault(require(\"../_shared/PickerToolbar\"));\n\nvar _ToolbarButton = _interopRequireDefault(require(\"../_shared/ToolbarButton\"));\n\nvar _timeUtils = require(\"../_helpers/time-utils\");\n\nvar _WithUtils = _interopRequireDefault(require(\"../_shared/WithUtils\"));\n\nvar _TimePickerView = _interopRequireDefault(require(\"./components/TimePickerView\"));\n\nvar clockType = _interopRequireWildcard(require(\"../constants/clock-types\"));\n\nvar TimePicker =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inheritsLoose2.default)(TimePicker, _Component);\n\n  function TimePicker() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n    _this.state = {\n      openView: clockType.HOURS,\n      meridiemMode: _this.props.utils.getHours(_this.props.date) >= 12 ? 'pm' : 'am'\n    };\n\n    _this.setMeridiemMode = function (mode) {\n      return function () {\n        _this.setState({\n          meridiemMode: mode\n        }, function () {\n          return _this.handleChange({\n            time: _this.props.date,\n            isFinish: false,\n            openMinutes: false,\n            openSeconds: false\n          });\n        });\n      };\n    };\n\n    _this.handleChange = function (_ref) {\n      var time = _ref.time,\n          isFinish = _ref.isFinish,\n          openMinutes = _ref.openMinutes,\n          openSeconds = _ref.openSeconds;\n      var withMeridiem = (0, _timeUtils.convertToMeridiem)(time, _this.state.meridiemMode, _this.props.ampm, _this.props.utils);\n\n      if (isFinish) {\n        if (!openMinutes && !openSeconds) {\n          _this.props.onChange(withMeridiem, isFinish);\n\n          return;\n        }\n\n        if (openMinutes) {\n          _this.openMinutesView();\n        }\n\n        if (openSeconds) {\n          _this.openSecondsView();\n        }\n      }\n\n      _this.props.onChange(withMeridiem, false);\n    };\n\n    _this.handleHourChange = function (time, isFinish) {\n      _this.handleChange({\n        time: time,\n        isFinish: isFinish,\n        openMinutes: true,\n        openSeconds: false\n      });\n    };\n\n    _this.handleMinutesChange = function (time, isFinish) {\n      _this.handleChange({\n        time: time,\n        isFinish: isFinish,\n        openMinutes: false,\n        openSeconds: _this.props.seconds\n      });\n    };\n\n    _this.handleSecondsChange = function (time, isFinish) {\n      _this.handleChange({\n        time: time,\n        isFinish: isFinish,\n        openMinutes: false,\n        openSeconds: false\n      });\n    };\n\n    _this.openSecondsView = function () {\n      _this.setState({\n        openView: clockType.SECONDS\n      });\n    };\n\n    _this.openMinutesView = function () {\n      _this.setState({\n        openView: clockType.MINUTES\n      });\n    };\n\n    _this.openHourView = function () {\n      _this.setState({\n        openView: clockType.HOURS\n      });\n    };\n\n    return _this;\n  }\n\n  var _proto = TimePicker.prototype;\n\n  _proto.render = function render() {\n    var _classnames;\n\n    var _this$props = this.props,\n        classes = _this$props.classes,\n        theme = _this$props.theme,\n        date = _this$props.date,\n        utils = _this$props.utils,\n        ampm = _this$props.ampm,\n        seconds = _this$props.seconds;\n    var _this$state = this.state,\n        meridiemMode = _this$state.meridiemMode,\n        openView = _this$state.openView;\n    var rtl = theme.direction === 'rtl';\n    var hourMinuteClassName = rtl ? classes.hourMinuteLabelReverse : classes.hourMinuteLabel;\n    return _react.default.createElement(_react.Fragment, null, _react.default.createElement(_PickerToolbar.default, {\n      className: (0, _classnames2.default)(classes.toolbar, (_classnames = {}, _classnames[classes.toolbarLeftPadding] = ampm, _classnames))\n    }, _react.default.createElement(\"div\", {\n      className: hourMinuteClassName\n    }, _react.default.createElement(_ToolbarButton.default, {\n      variant: \"display3\",\n      onClick: this.openHourView,\n      selected: openView === clockType.HOURS,\n      label: utils.getHourText(date, ampm)\n    }), _react.default.createElement(_ToolbarButton.default, {\n      variant: \"display3\",\n      label: \":\",\n      selected: false,\n      className: classes.separator\n    }), _react.default.createElement(_ToolbarButton.default, {\n      variant: \"display3\",\n      onClick: this.openMinutesView,\n      selected: openView === clockType.MINUTES,\n      label: utils.getMinuteText(date)\n    }), seconds && _react.default.createElement(_react.Fragment, null, _react.default.createElement(_ToolbarButton.default, {\n      variant: \"display3\",\n      label: \":\",\n      selected: false,\n      className: classes.separator\n    }), _react.default.createElement(_ToolbarButton.default, {\n      variant: \"display3\",\n      onClick: this.openSecondsView,\n      selected: openView === clockType.SECONDS,\n      label: utils.getSecondText(date)\n    }))), ampm && _react.default.createElement(\"div\", {\n      className: seconds ? classes.ampmSelectionWithSeconds : classes.ampmSelection\n    }, _react.default.createElement(_ToolbarButton.default, {\n      className: classes.ampmLabel,\n      selected: meridiemMode === 'am',\n      variant: \"subheading\",\n      label: utils.getMeridiemText('am'),\n      onClick: this.setMeridiemMode('am')\n    }), _react.default.createElement(_ToolbarButton.default, {\n      className: classes.ampmLabel,\n      selected: meridiemMode === 'pm',\n      variant: \"subheading\",\n      label: utils.getMeridiemText('pm'),\n      onClick: this.setMeridiemMode('pm')\n    }))), this.props.children, _react.default.createElement(_TimePickerView.default, {\n      date: date,\n      type: this.state.openView,\n      ampm: ampm,\n      onHourChange: this.handleHourChange,\n      onMinutesChange: this.handleMinutesChange,\n      onSecondsChange: this.handleSecondsChange\n    }));\n  };\n\n  return TimePicker;\n}(_react.Component);\n\nexports.TimePicker = TimePicker;\nTimePicker.defaultProps = {\n  children: null,\n  ampm: true,\n  seconds: false\n};\nprocess.env.NODE_ENV !== \"production\" ? TimePicker.propTypes = {\n  date: _propTypes.default.object.isRequired,\n  onChange: _propTypes.default.func.isRequired,\n  classes: _propTypes.default.object.isRequired,\n  theme: _propTypes.default.object.isRequired,\n  children: _propTypes.default.node,\n  utils: _propTypes.default.object.isRequired,\n  ampm: _propTypes.default.bool,\n  seconds: _propTypes.default.bool\n} : void 0;\n\nvar styles = function styles() {\n  return {\n    toolbar: {\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    toolbarLeftPadding: {\n      paddingLeft: 50\n    },\n    separator: {\n      margin: '0 4px 0 2px',\n      cursor: 'default'\n    },\n    ampmSelection: {\n      marginLeft: 20,\n      marginRight: -20\n    },\n    ampmSelectionWithSeconds: {\n      marginLeft: 15,\n      marginRight: 10\n    },\n    ampmLabel: {\n      fontSize: 18\n    },\n    hourMinuteLabel: {\n      display: 'flex',\n      justifyContent: 'flex-end',\n      alignItems: 'flex-end'\n    },\n    hourMinuteLabelReverse: {\n      display: 'flex',\n      justifyContent: 'flex-end',\n      alignItems: 'flex-end',\n      flexDirection: 'row-reverse'\n    }\n  };\n};\n\nvar _default = (0, _withStyles.default)(styles, {\n  withTheme: true,\n  name: 'MuiPickersTimePicker'\n})((0, _WithUtils.default)()(TimePicker));\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}