{"ast":null,"code":"var _jsxFileName = \"/home/arthur/UEM/DesenvolvimentoPET/pet-ui/src/Components/Admin/Turma/qrCode.js\";\nimport { connect } from 'react-redux';\nimport { change, submit, isSubmitting } from 'redux-form';\nimport React, { Component, Fragment } from 'react';\nimport { Button, SimpleForm, SaveButton, SelectInput, required, withDataProvider, GET_MANY_REFERENCE } from 'react-admin';\nimport QrReader from 'react-qr-reader';\nimport IconContentAdd from '@material-ui/icons/CameraAlt';\nimport IconCancel from '@material-ui/icons/Cancel';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PropTypes from 'prop-types';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport PathName from '../../pathConst';\n\nclass PostQuickCreateButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentWillMount = async () => {\n      const dataProvider = this.props.dataProvider;\n      await dataProvider(GET_MANY_REFERENCE, 'Dias', {\n        pagination: {\n          page: 1,\n          perPage: 0\n        },\n        sort: {\n          field: 'id',\n          order: 'DESC'\n        },\n        target: 'turmaId',\n        id: this.props.turmId\n      }, {\n        onError: {\n          notification: {\n            body: 'Error: algo deu errado!',\n            level: 'warning'\n          }\n        }\n      }).then(dias => {\n        dias.data.forEach(element => {\n          element.dia = new Date(element.dia).toLocaleDateString('pt-BR', {\n            weekday: 'long',\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric'\n          });\n        });\n        this.setState({\n          days: dias.data\n        });\n      });\n    };\n\n    this.handleClick = () => {\n      this.setState({\n        showDates: true\n      });\n    };\n\n    this.handleCloseClick = () => {\n      this.setState({\n        showDates: false\n      });\n      this.setState({\n        showQRCode: false\n      });\n    };\n\n    this.handleSaveClick = () => {\n      const submit = this.props.submit; // Trigger a submit of our custom quick create form\n      // This is needed because our modal action buttons are oustide the form\n\n      submit('post-quick-create');\n    };\n\n    this.handleSubmit = values => {\n      this.setState({\n        diaId: values.dia\n      });\n      this.setState({\n        showQRCode: true\n      });\n      this.setState({\n        showDates: false\n      });\n    };\n\n    this.state = {\n      delay: 100,\n      result: 'No result',\n      error: '',\n      days: {},\n      dateId: null,\n      showQRcode: false,\n      showDates: false\n    };\n    this.handleScan = this.handleScan.bind(this);\n  }\n\n  handleScan(data) {\n    let query = {\n      where: {\n        turmaId: this.props.turmId,\n        inscritoId: data\n      },\n      fields: {\n        id: true\n      }\n    };\n    axios.get(\"http://\".concat(PathName, \"/pet/api/Inscricoes/?filter=\").concat(JSON.stringify(query)), {\n      headers: {\n        Authorization: localStorage.getItem('access_token')\n      }\n    }).then(inscricao => {\n      axios.post(\"http://\".concat(PathName, \"/pet/api/Presencas\"), {\n        diaId: this.state.diaId,\n        inscricaoId: inscricao.data[0].id,\n        responsavelPresencaId: localStorage.getItem('user_id')\n      }, {\n        headers: {\n          Authorization: localStorage.getItem('access_token')\n        }\n      }).then(res => {\n        Swal.fire({\n          title: 'Operação realizada com sucesso!',\n          type: 'success',\n          timer: 3000,\n          onBeforeOpen: () => {\n            this.setState({\n              showQRCode: false\n            });\n          },\n          onClose: () => {\n            this.setState({\n              showQRCode: true\n            });\n          }\n        });\n      }).catch(err => {\n        Swal.fire({\n          type: 'error',\n          title: 'Ops! algo deu errado',\n          text: err.response.data.error.message,\n          timer: 3000,\n          onBeforeOpen: () => {\n            this.setState({\n              showQRCode: false\n            });\n          },\n          onClose: () => {\n            this.setState({\n              showQRCode: true\n            });\n          }\n        });\n      });\n    }).catch(err => {\n      Swal.fire({\n        type: 'error',\n        title: 'Ops! algo deu errado',\n        text: err.response.data.error.message,\n        timer: 3000,\n        onBeforeOpen: () => {\n          this.setState({\n            showQRCode: false\n          });\n        },\n        onClose: () => {\n          this.setState({\n            showQRCode: true\n          });\n        }\n      });\n    });\n  }\n\n  handleError(err) {\n    console.error(err);\n  } // openImageDialog() {\n  //   this.refs.qrReader1.openImageDialog();\n  // }\n\n\n  render() {\n    const _this$state = this.state,\n          showQRCode = _this$state.showQRCode,\n          showDates = _this$state.showDates;\n    const isSubmitting = this.props.isSubmitting;\n    const previewStyle = {\n      height: 240,\n      width: 320\n    };\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleClick,\n      label: \"Escanear QR-Code\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(IconContentAdd, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    })), React.createElement(Dialog, {\n      fullWidth: true,\n      open: showQRCode,\n      onClose: this.handleCloseClick,\n      \"aria-label\": \"Scanner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Scan QR-Code\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(QrReader, {\n      ref: \"qrReader1\",\n      delay: false,\n      style: {\n        width: '100%'\n      },\n      onError: this.handleError,\n      onScan: this.handleScan,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(Button, {\n      label: \"ra.action.cancel\",\n      onClick: this.handleCloseClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(IconCancel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    })))), React.createElement(Dialog, {\n      fullWidth: true,\n      open: showDates,\n      onClose: this.handleCloseClick,\n      \"aria-label\": \"Scanner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"Presen\\xE7a\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(SimpleForm // We override the redux-form name to avoid collision with the react-admin main form\n    , {\n      form: \"post-quick-create\",\n      resource: \"Inscricoes\" // We override the redux-form onSubmit prop to handle the submission ourselves\n      ,\n      onSubmit: this.handleSubmit // We want no toolbar at all as we have our modal actions\n      ,\n      toolbar: null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(SelectInput, {\n      label: \"Dia\",\n      source: \"dia\",\n      validate: required(),\n      optionText: \"dia\",\n      optionValue: \"id\",\n      choices: this.state.days,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }))), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(SaveButton, {\n      label: \"Scannear usu\\xE1rio\",\n      saving: isSubmitting,\n      onClick: this.handleSaveClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"ra.action.cancel\",\n      onClick: this.handleCloseClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(IconCancel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nPostQuickCreateButton.propTypes = {\n  dataProvider: PropTypes.func.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  record: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  isSubmitting: isSubmitting('post-quick-create')(state)\n});\n\nconst mapDispatchToProps = {\n  change,\n  submit\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withDataProvider(PostQuickCreateButton));","map":{"version":3,"sources":["/home/arthur/UEM/DesenvolvimentoPET/pet-ui/src/Components/Admin/Turma/qrCode.js"],"names":["connect","change","submit","isSubmitting","React","Component","Fragment","Button","SimpleForm","SaveButton","SelectInput","required","withDataProvider","GET_MANY_REFERENCE","QrReader","IconContentAdd","IconCancel","Dialog","DialogTitle","PropTypes","DialogContent","DialogActions","axios","Swal","PathName","PostQuickCreateButton","constructor","props","componentWillMount","dataProvider","pagination","page","perPage","sort","field","order","target","id","turmId","onError","notification","body","level","then","dias","data","forEach","element","dia","Date","toLocaleDateString","weekday","year","month","day","hour","minute","setState","days","handleClick","showDates","handleCloseClick","showQRCode","handleSaveClick","handleSubmit","values","diaId","state","delay","result","error","dateId","showQRcode","handleScan","bind","query","where","turmaId","inscritoId","fields","get","JSON","stringify","headers","Authorization","localStorage","getItem","inscricao","post","inscricaoId","responsavelPresencaId","res","fire","title","type","timer","onBeforeOpen","onClose","catch","err","text","response","message","handleError","console","render","previewStyle","height","width","propTypes","func","isRequired","dispatch","record","object","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport { change, submit, isSubmitting } from 'redux-form';\nimport React, { Component, Fragment } from 'react';\nimport {\n  Button,\n  SimpleForm,\n  SaveButton,\n  SelectInput,\n  required,\n  withDataProvider,\n  GET_MANY_REFERENCE\n} from 'react-admin';\nimport QrReader from 'react-qr-reader';\nimport IconContentAdd from '@material-ui/icons/CameraAlt';\nimport IconCancel from '@material-ui/icons/Cancel';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PropTypes from 'prop-types';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport PathName from '../../pathConst';\n\nclass PostQuickCreateButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      delay: 100,\n      result: 'No result',\n      error: '',\n      days: {},\n      dateId: null,\n      showQRcode: false,\n      showDates: false\n    };\n\n    this.handleScan = this.handleScan.bind(this);\n  }\n  componentWillMount = async () => {\n    const { dataProvider } = this.props;\n    await dataProvider(\n      GET_MANY_REFERENCE,\n      'Dias',\n      {\n        pagination: { page: 1, perPage: 0 },\n        sort: { field: 'id', order: 'DESC' },\n        target: 'turmaId',\n        id: this.props.turmId\n      },\n      {\n        onError: {\n          notification: {\n            body: 'Error: algo deu errado!',\n            level: 'warning'\n          }\n        }\n      }\n    ).then(dias => {\n      dias.data.forEach(element => {\n        element.dia = new Date(element.dia).toLocaleDateString('pt-BR', {\n          weekday: 'long',\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric',\n          hour: 'numeric',\n          minute: 'numeric'\n        });\n      });\n      this.setState({ days: dias.data });\n    });\n  };\n  handleClick = () => {\n    this.setState({ showDates: true });\n  };\n\n  handleCloseClick = () => {\n    this.setState({ showDates: false });\n    this.setState({ showQRCode: false });\n  };\n\n  handleSaveClick = () => {\n    const { submit } = this.props;\n\n    // Trigger a submit of our custom quick create form\n    // This is needed because our modal action buttons are oustide the form\n    submit('post-quick-create');\n  };\n\n  handleSubmit = values => {\n    this.setState({ diaId: values.dia });\n    this.setState({ showQRCode: true });\n    this.setState({ showDates: false });\n  };\n  handleScan(data) {\n    let query = {\n      where: { turmaId: this.props.turmId, inscritoId: data },\n      fields: { id: true }\n    };\n    axios\n      .get(\n        `http://${PathName}/pet/api/Inscricoes/?filter=${JSON.stringify(\n          query\n        )}`,\n        {\n          headers: {\n            Authorization: localStorage.getItem('access_token')\n          }\n        }\n      )\n      .then(inscricao => {\n        axios\n          .post(\n            `http://${PathName}/pet/api/Presencas`,\n            {\n              diaId: this.state.diaId,\n              inscricaoId: inscricao.data[0].id,\n              responsavelPresencaId: localStorage.getItem('user_id')\n            },\n            {\n              headers: {\n                Authorization: localStorage.getItem('access_token')\n              }\n            }\n          )\n          .then(res => {\n            Swal.fire({\n              title: 'Operação realizada com sucesso!',\n              type: 'success',\n              timer: 3000,\n              onBeforeOpen: () => {\n                this.setState({ showQRCode: false });\n              },\n              onClose: () => {\n                this.setState({ showQRCode: true });\n              }\n            });\n          })\n          .catch(err => {\n            Swal.fire({\n              type: 'error',\n              title: 'Ops! algo deu errado',\n              text: err.response.data.error.message,\n              timer: 3000,\n              onBeforeOpen: () => {\n                this.setState({ showQRCode: false });\n              },\n              onClose: () => {\n                this.setState({ showQRCode: true });\n              }\n            });\n          });\n      })\n      .catch(err => {\n        Swal.fire({\n          type: 'error',\n          title: 'Ops! algo deu errado',\n          text: err.response.data.error.message,\n          timer: 3000,\n          onBeforeOpen: () => {\n            this.setState({ showQRCode: false });\n          },\n          onClose: () => {\n            this.setState({ showQRCode: true });\n          }\n        });\n      });\n  }\n  handleError(err) {\n    console.error(err);\n  }\n  // openImageDialog() {\n  //   this.refs.qrReader1.openImageDialog();\n  // }\n  render() {\n    const { showQRCode, showDates } = this.state;\n    const { isSubmitting } = this.props;\n    const previewStyle = {\n      height: 240,\n      width: 320\n    };\n\n    return (\n      <Fragment>\n        <Button onClick={this.handleClick} label=\"Escanear QR-Code\">\n          <IconContentAdd />\n        </Button>\n        <Dialog\n          fullWidth\n          open={showQRCode}\n          onClose={this.handleCloseClick}\n          aria-label=\"Scanner\"\n        >\n          <DialogTitle>Scan QR-Code</DialogTitle>\n          <DialogContent>\n            <QrReader\n              ref=\"qrReader1\"\n              delay={false}\n              style={{ width: '100%' }}\n              onError={this.handleError}\n              onScan={this.handleScan}\n            />\n          </DialogContent>\n          <DialogActions>\n            {/* <SaveButton\n              label=\"Selecionar image\"\n              value=\"Submit QR Code\"\n              saving={isSubmitting}\n              onClick={this.openImageDialog.bind(this)}\n            /> */}\n            <Button label=\"ra.action.cancel\" onClick={this.handleCloseClick}>\n              <IconCancel />\n            </Button>\n          </DialogActions>\n        </Dialog>\n        <Dialog\n          fullWidth\n          open={showDates}\n          onClose={this.handleCloseClick}\n          aria-label=\"Scanner\"\n        >\n          <DialogTitle>Presença</DialogTitle>\n          <DialogContent>\n            <SimpleForm\n              // We override the redux-form name to avoid collision with the react-admin main form\n              form=\"post-quick-create\"\n              resource=\"Inscricoes\"\n              // We override the redux-form onSubmit prop to handle the submission ourselves\n              onSubmit={this.handleSubmit}\n              // We want no toolbar at all as we have our modal actions\n              toolbar={null}\n            >\n              <SelectInput\n                label=\"Dia\"\n                source=\"dia\"\n                validate={required()}\n                optionText=\"dia\"\n                optionValue=\"id\"\n                choices={this.state.days}\n              />\n            </SimpleForm>\n          </DialogContent>\n          <DialogActions>\n            <SaveButton\n              label=\"Scannear usuário\"\n              saving={isSubmitting}\n              onClick={this.handleSaveClick}\n            />\n            <Button label=\"ra.action.cancel\" onClick={this.handleCloseClick}>\n              <IconCancel />\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Fragment>\n    );\n  }\n}\n\nPostQuickCreateButton.propTypes = {\n  dataProvider: PropTypes.func.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  record: PropTypes.object\n};\nconst mapStateToProps = state => ({\n  isSubmitting: isSubmitting('post-quick-create')(state)\n});\n\nconst mapDispatchToProps = {\n  change,\n\n  submit\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withDataProvider(PostQuickCreateButton));\n"]},"metadata":{},"sourceType":"module"}