{"ast":null,"code":"import _objectSpread from \"/home/arthur/UEM/DesenvolvimentoPET/pet-ui/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport loopbackClient from \"react-admin-loopback\";\nimport Swal from \"sweetalert2\";\nimport PathName from \"../pathConst\";\n\nconst fetchJson = async (url, options = {}) => {\n  const requestHeaders = options.headers || new Headers({\n    Accept: \"application/json\"\n  });\n\n  if (!requestHeaders.has(\"Content-Type\") && !(options && options.body && options.body instanceof FormData)) {\n    requestHeaders.set(\"Content-Type\", \"application/json\");\n  }\n\n  if (options.user && options.user.authenticated && options.user.token) {\n    requestHeaders.set(\"Authorization\", options.user.token);\n  }\n\n  const response = await fetch(url, _objectSpread({}, options, {\n    headers: requestHeaders\n  }));\n  const text = await response.text();\n  const o = {\n    status: response.status,\n    statusText: response.statusText,\n    headers: response.headers,\n    body: text\n  };\n  let status = o.status,\n      headers = o.headers,\n      body = o.body;\n  let json;\n\n  try {\n    json = JSON.parse(body);\n  } catch (e) {// not json, no big deal\n  }\n\n  if (status < 200 || status >= 300) {\n    Swal.fire({\n      type: \"error\",\n      title: \"Ops! algo deu errado\",\n      text: json.error.message\n    });\n  }\n\n  return Promise.resolve({\n    status: status,\n    headers: headers,\n    body: body,\n    json: json\n  });\n};\n\nconst httpClient = (url, options = {}) => {\n  if (!options.headers) {\n    options.headers = new Headers({\n      Accept: \"application/json\"\n    });\n  }\n\n  const token = localStorage.getItem(\"access_token\");\n  options.headers.set(\"Authorization\", token);\n  return fetchJson(url, options);\n};\n\nconst dataProvider = loopbackClient(\"http://\".concat(PathName, \"/pet/api\"), httpClient);\nexport default ((type, resource, params) => new Promise(resolve => setTimeout(() => resolve(dataProvider(type, resource, params)), 500)));","map":{"version":3,"sources":["/home/arthur/UEM/DesenvolvimentoPET/pet-ui/src/Components/Admin/dataProvider.js"],"names":["loopbackClient","Swal","PathName","fetchJson","url","options","requestHeaders","headers","Headers","Accept","has","body","FormData","set","user","authenticated","token","response","fetch","text","o","status","statusText","json","JSON","parse","e","fire","type","title","error","message","Promise","resolve","httpClient","localStorage","getItem","dataProvider","resource","params","setTimeout"],"mappings":"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","sourcesContent":["import loopbackClient from \"react-admin-loopback\";\nimport Swal from \"sweetalert2\";\nimport PathName from \"../pathConst\";\n\nconst fetchJson = async (url, options = {}) => {\n  const requestHeaders =\n    options.headers ||\n    new Headers({\n      Accept: \"application/json\"\n    });\n  if (\n    !requestHeaders.has(\"Content-Type\") &&\n    !(options && options.body && options.body instanceof FormData)\n  ) {\n    requestHeaders.set(\"Content-Type\", \"application/json\");\n  }\n  if (options.user && options.user.authenticated && options.user.token) {\n    requestHeaders.set(\"Authorization\", options.user.token);\n  }\n  const response = await fetch(url, { ...options, headers: requestHeaders });\n  const text = await response.text();\n  const o = {\n    status: response.status,\n    statusText: response.statusText,\n    headers: response.headers,\n    body: text\n  };\n  let status = o.status,\n    headers = o.headers,\n    body = o.body;\n  let json;\n  try {\n    json = JSON.parse(body);\n  } catch (e) {\n    // not json, no big deal\n  }\n  if (status < 200 || status >= 300) {\n    Swal.fire({\n      type: \"error\",\n      title: \"Ops! algo deu errado\",\n      text: json.error.message\n    });\n  }\n  return Promise.resolve({\n    status: status,\n    headers: headers,\n    body: body,\n    json: json\n  });\n};\nconst httpClient = (url, options = {}) => {\n  if (!options.headers) {\n    options.headers = new Headers({ Accept: \"application/json\" });\n  }\n  const token = localStorage.getItem(\"access_token\");\n  options.headers.set(\"Authorization\", token);\n  return fetchJson(url, options);\n};\n\nconst dataProvider = loopbackClient(`http://${PathName}/pet/api`, httpClient);\nexport default (type, resource, params) =>\n  new Promise(resolve =>\n    setTimeout(() => resolve(dataProvider(type, resource, params)), 500)\n  );\n"]},"metadata":{},"sourceType":"module"}