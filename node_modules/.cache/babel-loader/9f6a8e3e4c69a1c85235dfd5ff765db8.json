{"ast":null,"code":"var _jsxFileName = \"/home/arthur/UEM/front-ProjetosUEM/src/Components/Admin/Evento/addValor.js\";\nimport { connect } from 'react-redux';\nimport { change, submit, isSubmitting } from 'redux-form';\nimport React, { Component, Fragment } from 'react';\nimport { required, Button, SaveButton, minValue, CREATE, SimpleForm, NumberInput, TextInput, withDataProvider } from 'react-admin';\nimport IconContentAdd from '@material-ui/icons/Add';\nimport IconCancel from '@material-ui/icons/Cancel';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PropTypes from 'prop-types';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nclass PostQuickCreateButton extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      error: false,\n      showDialog: false\n    };\n\n    this.handleClick = () => {\n      this.setState({\n        showDialog: true\n      });\n    };\n\n    this.handleCloseClick = () => {\n      this.setState({\n        showDialog: false\n      });\n    };\n\n    this.handleSaveClick = () => {\n      const submit = this.props.submit; // Trigger a submit of our custom quick create form\n      // This is needed because our modal action buttons are oustide the form\n\n      submit('post-quick-create');\n    };\n\n    this.handleSubmit = values => {\n      const dataProvider = this.props.dataProvider;\n      dataProvider(CREATE, 'Valores', {\n        pagination: {\n          page: 1,\n          perPage: 0\n        },\n        sort: {\n          field: 'id',\n          order: 'DESC'\n        },\n        data: {\n          eventoId: this.props.eventId,\n          nome: values.nome,\n          preco: values.preco\n        }\n      }, {\n        onSuccess: {\n          refresh: true\n        },\n        onError: {\n          notification: {\n            body: 'Error: algo deu errado!',\n            level: 'warning'\n          }\n        }\n      });\n      this.setState({\n        showDialog: false\n      });\n    };\n  }\n\n  render() {\n    const showDialog = this.state.showDialog;\n    const isSubmitting = this.props.isSubmitting;\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleClick,\n      label: \"Valor\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(IconContentAdd, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })), React.createElement(Dialog, {\n      fullWidth: true,\n      open: showDialog,\n      onClose: this.handleCloseClick,\n      \"aria-label\": \"Criar valor\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Criar valor\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(SimpleForm // We override the redux-form name to avoid collision with the react-admin main form\n    , {\n      form: \"post-quick-create\",\n      resource: \"Valores\" // We override the redux-form onSubmit prop to handle the submission ourselves\n      ,\n      onSubmit: this.handleSubmit // We want no toolbar at all as we have our modal actions\n      ,\n      toolbar: null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(TextInput, {\n      source: \"nome\",\n      label: \"Categoria\",\n      validate: required(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(NumberInput, {\n      source: \"preco\",\n      validate: [required(), minValue(1, 'Quantidade precisa ser pelo menos 1')],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }))), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(SaveButton, {\n      label: \"Confirmar\",\n      saving: isSubmitting,\n      onClick: this.handleSaveClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"ra.action.cancel\",\n      onClick: this.handleCloseClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(IconCancel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nPostQuickCreateButton.propTypes = {\n  dataProvider: PropTypes.func.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  record: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  isSubmitting: isSubmitting('post-quick-create')(state)\n});\n\nconst mapDispatchToProps = {\n  change,\n  submit\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withDataProvider(PostQuickCreateButton));","map":{"version":3,"sources":["/home/arthur/UEM/front-ProjetosUEM/src/Components/Admin/Evento/addValor.js"],"names":["connect","change","submit","isSubmitting","React","Component","Fragment","required","Button","SaveButton","minValue","CREATE","SimpleForm","NumberInput","TextInput","withDataProvider","IconContentAdd","IconCancel","Dialog","DialogTitle","PropTypes","DialogContent","DialogActions","PostQuickCreateButton","state","error","showDialog","handleClick","setState","handleCloseClick","handleSaveClick","props","handleSubmit","values","dataProvider","pagination","page","perPage","sort","field","order","data","eventoId","eventId","nome","preco","onSuccess","refresh","onError","notification","body","level","render","propTypes","func","isRequired","dispatch","record","object","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport { change, submit, isSubmitting } from 'redux-form';\nimport React, { Component, Fragment } from 'react';\nimport {\n  required,\n  Button,\n  SaveButton,\n  minValue,\n  CREATE,\n  SimpleForm,\n  NumberInput,\n  TextInput,\n  withDataProvider\n} from 'react-admin';\nimport IconContentAdd from '@material-ui/icons/Add';\nimport IconCancel from '@material-ui/icons/Cancel';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PropTypes from 'prop-types';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nclass PostQuickCreateButton extends Component {\n  state = {\n    error: false,\n    showDialog: false\n  };\n\n  handleClick = () => {\n    this.setState({ showDialog: true });\n  };\n\n  handleCloseClick = () => {\n    this.setState({ showDialog: false });\n  };\n\n  handleSaveClick = () => {\n    const { submit } = this.props;\n\n    // Trigger a submit of our custom quick create form\n    // This is needed because our modal action buttons are oustide the form\n    submit('post-quick-create');\n  };\n\n  handleSubmit = values => {\n    const { dataProvider } = this.props;\n    dataProvider(\n      CREATE,\n      'Valores',\n      {\n        pagination: { page: 1, perPage: 0 },\n        sort: { field: 'id', order: 'DESC' },\n        data: {\n          eventoId: this.props.eventId,\n          nome: values.nome,\n          preco: values.preco\n        }\n      },\n      {\n        onSuccess: {\n          refresh: true\n        },\n        onError: {\n          notification: {\n            body: 'Error: algo deu errado!',\n            level: 'warning'\n          }\n        }\n      }\n    );\n    this.setState({ showDialog: false });\n  };\n\n  render() {\n    const { showDialog } = this.state;\n    const { isSubmitting } = this.props;\n\n    return (\n      <Fragment>\n        <Button onClick={this.handleClick} label=\"Valor\">\n          <IconContentAdd />\n        </Button>\n        <Dialog\n          fullWidth\n          open={showDialog}\n          onClose={this.handleCloseClick}\n          aria-label=\"Criar valor\"\n        >\n          <DialogTitle>Criar valor</DialogTitle>\n          <DialogContent>\n            <SimpleForm\n              // We override the redux-form name to avoid collision with the react-admin main form\n              form=\"post-quick-create\"\n              resource=\"Valores\"\n              // We override the redux-form onSubmit prop to handle the submission ourselves\n              onSubmit={this.handleSubmit}\n              // We want no toolbar at all as we have our modal actions\n              toolbar={null}\n            >\n              <TextInput\n                source=\"nome\"\n                label=\"Categoria\"\n                validate={required()}\n              />\n              <NumberInput\n                source=\"preco\"\n                validate={[\n                  required(),\n                  minValue(1, 'Quantidade precisa ser pelo menos 1')\n                ]}\n              ></NumberInput>\n            </SimpleForm>\n          </DialogContent>\n          <DialogActions>\n            <SaveButton\n              label=\"Confirmar\"\n              saving={isSubmitting}\n              onClick={this.handleSaveClick}\n            />\n            <Button label=\"ra.action.cancel\" onClick={this.handleCloseClick}>\n              <IconCancel />\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Fragment>\n    );\n  }\n}\n\nPostQuickCreateButton.propTypes = {\n  dataProvider: PropTypes.func.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  record: PropTypes.object\n};\nconst mapStateToProps = state => ({\n  isSubmitting: isSubmitting('post-quick-create')(state)\n});\n\nconst mapDispatchToProps = {\n  change,\n\n  submit\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withDataProvider(PostQuickCreateButton));\n"]},"metadata":{},"sourceType":"module"}